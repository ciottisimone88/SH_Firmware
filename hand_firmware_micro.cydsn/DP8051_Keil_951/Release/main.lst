C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051_Keil_951
                    -\Release/main.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          /**
  36          * \file         main.c
  37          *
  38          * \brief        Firmware main file.
  39          * \date         October 01, 2017
  40          * \author       _Centro "E.Piaggio"_
  41          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42          * \copyright    (C) 2017 Centro "E.Piaggio". All rights reserved.
  43          * \mainpage     Firmware
  44          * \brief        This is the firmware of the SoftHand board.
  45          * \version      6.1.7
  46          *
  47          * \details      This is the firmware of the SoftHand board. It can control a motor and
  48          *               read its encoder. Also can read and convert analog measurements
  49          *               connected to the PSoC microcontroller.                
  50          *
  51          */
  52          
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 2   

  53          
  54          // ----------------------------------------------------------------------------
  55          // This version changes:
  56          //      - not reported
  57          
  58          
  59          //=================================================================     includes
  60          
  61          #include <device.h>
  62          #include <globals.h>
  63          #include <interruptions.h>
  64          #include <command_processing.h>
  65          #include <utils.h>
  66          
  67          //==============================================================================
  68          //                                                                 MAIN FUNCTION
  69          //==============================================================================
  70          
  71          int main()
  72          {
  73   1          // Iterator
  74   1          
  75   1              uint8 i;         
  76   1          
  77   1          // Variable declarations for DMA 
  78   1          
  79   1          uint8 DMA_Chan;
  80   1          uint8 DMA_TD[1];
  81   1      
  82   1          //================================     initializations - psoc and components
  83   1      
  84   1          // EEPROM
  85   1      
  86   1          EEPROM_Start();
  87   1          memRecall();                                        // Recall configuration.
  88   1      
  89   1          // FTDI chip enable
  90   1      
  91   1          CyDelay(100);
  92   1          FTDI_ENABLE_REG_Write(0x01);
  93   1          
  94   1              // BOARD LED Enable
  95   1          LED_CTRL_Write(1);
  96   1          //PWM Blink Enable
  97   1          LED_BLINK_EN_Write(0);
  98   1          LED_BLINK_Start();
  99   1          LED_BLINK_WriteCompare(128);
 100   1              
 101   1          // RS485
 102   1      
 103   1          UART_RS485_Stop();                                  // stop UART
 104   1          UART_RS485_Start();                                 // start UART
 105   1          UART_RS485_Init();
 106   1      
 107   1          UART_RS485_ClearRxBuffer();
 108   1          UART_RS485_ClearTxBuffer();
 109   1      
 110   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function.
 111   1          
 112   1          // CYCLES TIMER
 113   1          
 114   1          CYCLES_TIMER_Start();
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 3   

 115   1          ISR_CYCLES_StartEx(ISR_CYCLES_Handler);
 116   1          
 117   1          // WATCHDOG
 118   1          
 119   1          WATCHDOG_COUNTER_Start();
 120   1          WATCHDOG_ENABLER_Write(1);                          // Initialize watchdog to disabled.
 121   1          
 122   1          ISR_WATCHDOG_StartEx(ISR_WATCHDOG_Handler);         // WATCHDOG isr function.    
 123   1      
 124   1          // PWM
 125   1      
 126   1          PWM_MOTORS_Start();
 127   1          PWM_MOTORS_WriteCompare1(0);
 128   1          PWM_MOTORS_WriteCompare2(0);
 129   1          MOTOR_DIR_Write(0);
 130   1          MOTOR_ON_OFF_Write(0x00);
 131   1      
 132   1      
 133   1          // SSI encoder initializations
 134   1      
 135   1          COUNTER_ENC_Start();
 136   1      
 137   1          SHIFTREG_ENC_1_Start();
 138   1          SHIFTREG_ENC_2_Start();
 139   1          SHIFTREG_ENC_3_Start();
 140   1      
 141   1          // ADC
 142   1      
 143   1          ADC_Start();                                        
 144   1          ADC_SOC_Write(0x01);                                // Force first read cycle.
 145   1         
 146   1          // DMA
 147   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
             -DST_BASE));
 148   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD.
 149   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 4, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
             -; // DMA Configurations.
 150   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address.
 151   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel.
 152   1          
 153   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA.
 154   1      
 155   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485.
 156   1      
 157   1          // TIMER
 158   1      
 159   1          MY_TIMER_Start();           
 160   1          PACER_TIMER_Start();
 161   1      
 162   1          CYGlobalIntEnable;                                  // Enable interrupts.
 163   1      
 164   1      //========================================     initializations - clean variables
 165   1      
 166   1          RESET_COUNTERS_Write(0x00);                         // Activate encoder counters. Must be made before 
             -initializing measurements to zero.
 167   1      
 168   1          CyDelay(10);                                        // Wait for encoders to have a valid value.
 169   1      
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 4   

 170   1          //---------------------------------------------------  Initialize referiment structure
 171   1          for (i = NUM_OF_MOTORS; i--;) 
 172   1              g_ref.pos[i] = 0;
 173   1          g_ref.curr_offset = 0;
 174   1      
 175   1          if (c_mem.emg_calibration_flag) {
 176   2              if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 177   2                  (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 178   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 179   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV))
 180   2                  g_ref.onoff = 0x00;
 181   2              else
 182   2                  g_ref.onoff = c_mem.activ;
 183   2          } 
 184   1          else
 185   1              g_ref.onoff = c_mem.activ;
 186   1          
 187   1          //---------------------------------------------------  Initialize measurement structure
 188   1          for (i = NUM_OF_SENSORS; i--;) { 
 189   2              g_meas.pos[i] = 0;
 190   2              g_meas.rot[i] = 0;
 191   2          }
 192   1      
 193   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure.
 194   1      
 195   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation.
 196   1          
 197   1          //---------------------------------------------------  Initialize emg structure
 198   1          g_meas.emg[0] = 0;
 199   1          g_meas.emg[1] = 0;
 200   1      
 201   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activate motors.
 202   1      
 203   1          dev_pwm_limit = dev_pwm_sat;                                                // Init PWM limit.
 204   1          pow_tension = 12000;                                                        // 12000 mV (12 V).
 205   1          tension_valid = FALSE;                              // Init tension_valid BIT.
 206   1      
 207   1          reset_last_value_flag = 0;
 208   1      
 209   1          //------------------------------------------------- Initialize package on receive from RS485
 210   1          g_rx.length = 0;
 211   1          g_rx.ready  = 0;
 212   1              
 213   1          //------------------------------------------------- Initialize rest position variables    
 214   1              rest_enabled = 1;
 215   1          forced_open = 0; 
 216   1      
 217   1          //============================================================     main loop
 218   1      
 219   1          for(;;)
 220   1          {
 221   2              // Put the FF reset pin to LOW
 222   2              RESET_FF_Write(0x00);
 223   2      
 224   2              // Call function scheduler
 225   2              function_scheduler();
 226   2      
 227   2              //  Wait until the FF is set to 1
 228   2              while(FF_STATUS_Read() == 0){
 229   3                  // On interrupt from RS485
 230   3                  if (interrupt_flag){
 231   4                      // Reset WDT
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 5   

 232   4                      WATCHDOG_REFRESH_Write(0x01);
 233   4                      // Reset flags
 234   4                      interrupt_flag = FALSE;
 235   4                      watchdog_flag = FALSE;
 236   4                      // Manage Interrupt on rs485
 237   4                      interrupt_manager();
 238   4                  }
 239   3                  // On interrupt from WDT
 240   3                  else { 
 241   4                      if (watchdog_flag){
 242   5                          // Reset WDT
 243   5                          WATCHDOG_REFRESH_Write(0x01);
 244   5                          // Disactivate motors
 245   5                          g_refNew.onoff = 0x00;
 246   5                      }
 247   4                  }
 248   3              };
 249   2      
 250   2              // Command a FF reset
 251   2              RESET_FF_Write(0x01);
 252   2      
 253   2              // Wait for FF to be reset
 254   2              while(FF_STATUS_Read() == 1);
 255   2      
 256   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 257   2                  UART_RS485_ClearRxBuffer();
 258   2          }
 259   1          return 0;
 260   1      }
 261          
 262          
 263          
 264          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 86
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 87
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 91
0006 E4                CLR     A
0007 7F64              MOV     R7,#064H
0009 FE                MOV     R6,A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 92
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 95
0014 7F01              MOV     R7,#01H
0016 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 97
0019 E4                CLR     A
001A FF                MOV     R7,A
001B 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 98
001E 120000      E     LCALL   LED_BLINK_Start
                                           ; SOURCE LINE # 99
0021 7F80              MOV     R7,#080H
0023 120000      E     LCALL   _LED_BLINK_WriteCompare
                                           ; SOURCE LINE # 103
0026 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 104
0029 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 105
002C 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 107
002F 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 108
0032 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 110
0035 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0037 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0039 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 114
003C 120000      E     LCALL   CYCLES_TIMER_Start
                                           ; SOURCE LINE # 115
003F 7E00        E     MOV     R6,#HIGH ISR_CYCLES_Handler
0041 7F00        E     MOV     R7,#LOW ISR_CYCLES_Handler
0043 120000      E     LCALL   _ISR_CYCLES_StartEx
                                           ; SOURCE LINE # 119
0046 120000      E     LCALL   WATCHDOG_COUNTER_Start
                                           ; SOURCE LINE # 120
0049 7F01              MOV     R7,#01H
004B 120000      E     LCALL   _WATCHDOG_ENABLER_Write
                                           ; SOURCE LINE # 122
004E 7E00        E     MOV     R6,#HIGH ISR_WATCHDOG_Handler
0050 7F00        E     MOV     R7,#LOW ISR_WATCHDOG_Handler
0052 120000      E     LCALL   _ISR_WATCHDOG_StartEx
                                           ; SOURCE LINE # 126
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 7   

0055 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 127
0058 E4                CLR     A
0059 FF                MOV     R7,A
005A 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 128
005D E4                CLR     A
005E FF                MOV     R7,A
005F 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 129
0062 E4                CLR     A
0063 FF                MOV     R7,A
0064 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 130
0067 E4                CLR     A
0068 FF                MOV     R7,A
0069 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 135
006C 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 137
006F 120000      E     LCALL   SHIFTREG_ENC_1_Start
                                           ; SOURCE LINE # 138
0072 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 139
0075 120000      E     LCALL   SHIFTREG_ENC_3_Start
                                           ; SOURCE LINE # 143
0078 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 144
007B 7F01              MOV     R7,#01H
007D 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 147
0080 E4                CLR     A
0081 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 F0                MOVX    @DPTR,A
0087 FB                MOV     R3,A
0088 FA                MOV     R2,A
0089 7D01              MOV     R5,#01H
008B 7F02              MOV     R7,#02H
008D 120000      E     LCALL   _DMA_DmaInitialize
0090 900000      R     MOV     DPTR,#DMA_Chan
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0095 120000      E     LCALL   CyDmaTdAllocate
0098 900000      R     MOV     DPTR,#DMA_TD
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
009D E0                MOVX    A,@DPTR
009E FB                MOV     R3,A
009F FF                MOV     R7,A
00A0 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
00A3 7486              MOV     A,#086H
00A5 F0                MOVX    @DPTR,A
00A6 7D08              MOV     R5,#08H
00A8 7C00              MOV     R4,#00H
00AA 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 150
00AD 7B01              MOV     R3,#01H
00AF 7A00        E     MOV     R2,#HIGH ADC_buf
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 8   

00B1 7900        E     MOV     R1,#LOW ADC_buf
00B3 E9                MOV     A,R1
00B4 EA                MOV     A,R2
00B5 E4                CLR     A
00B6 AB01              MOV     R3,AR1
00B8 900000      R     MOV     DPTR,#DMA_TD
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
00BD 7D10              MOV     R5,#010H
00BF 7C4E              MOV     R4,#04EH
00C1 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 151
00C4 900000      R     MOV     DPTR,#DMA_Chan
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 A3                INC     DPTR
00CA E0                MOVX    A,@DPTR
00CB FD                MOV     R5,A
00CC 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 153
00CF 900000      R     MOV     DPTR,#DMA_Chan
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 7D01              MOV     R5,#01H
00D6 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 155
00D9 E4                CLR     A
00DA FF                MOV     R7,A
00DB 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 159
00DE 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 160
00E1 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 162
00E4 D2AF              SETB    EA
00E6 9044F4            MOV     DPTR,#044F4H
00E9 74FD              MOV     A,#0FDH
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
00EC E4                CLR     A
00ED FF                MOV     R7,A
00EE 120000      E     LCALL   _RESET_COUNTERS_Write
                                           ; SOURCE LINE # 168
00F1 E4                CLR     A
00F2 7F0A              MOV     R7,#0AH
00F4 FE                MOV     R6,A
00F5 FD                MOV     R5,A
00F6 FC                MOV     R4,A
00F7 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 171
;---- Variable 'i' assigned to Register 'R3' ----
00FA 7B02              MOV     R3,#02H
00FC         ?C0001:
00FC AF03              MOV     R7,AR3
00FE 1B                DEC     R3
00FF EF                MOV     A,R7
0100 6018              JZ      ?C0002
                                           ; SOURCE LINE # 172
0102 E4                CLR     A
0103 FF                MOV     R7,A
0104 FE                MOV     R6,A
0105 FD                MOV     R5,A
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 9   

0106 FC                MOV     R4,A
0107 EB                MOV     A,R3
0108 25E0              ADD     A,ACC
010A 25E0              ADD     A,ACC
010C 2400        E     ADD     A,#LOW g_ref
010E F582              MOV     DPL,A
0110 E4                CLR     A
0111 3400        E     ADDC    A,#HIGH g_ref
0113 F583              MOV     DPH,A
0115 120000      E     LCALL   ?C?LSTXDATA
0118 80E2              SJMP    ?C0001
011A         ?C0002:
                                           ; SOURCE LINE # 173
011A E4                CLR     A
011B FF                MOV     R7,A
011C FE                MOV     R6,A
011D FD                MOV     R5,A
011E FC                MOV     R4,A
011F 900000      E     MOV     DPTR,#g_ref+019H
0122 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 175
0125 900000      E     MOV     DPTR,#c_mem+06FH
0128 E0                MOVX    A,@DPTR
0129 6028              JZ      ?C0003
                                           ; SOURCE LINE # 176
012B 900000      E     MOV     DPTR,#c_mem+033H
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 6402              XRL     A,#02H
0132 600E              JZ      ?C0005
0134 EF                MOV     A,R7
0135 6403              XRL     A,#03H
0137 6009              JZ      ?C0005
0139 EF                MOV     A,R7
013A 6404              XRL     A,#04H
013C 6004              JZ      ?C0005
013E EF                MOV     A,R7
013F B40507            CJNE    A,#05H,?C0004
0142         ?C0005:
                                           ; SOURCE LINE # 180
0142 E4                CLR     A
0143 900000      E     MOV     DPTR,#g_ref+018H
0146 F0                MOVX    @DPTR,A
0147 8012              SJMP    ?C0007
0149         ?C0004:
                                           ; SOURCE LINE # 182
0149 900000      E     MOV     DPTR,#c_mem+032H
014C E0                MOVX    A,@DPTR
014D 900000      E     MOV     DPTR,#g_ref+018H
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0151 8008              SJMP    ?C0007
0153         ?C0003:
                                           ; SOURCE LINE # 185
0153 900000      E     MOV     DPTR,#c_mem+032H
0156 E0                MOVX    A,@DPTR
0157 900000      E     MOV     DPTR,#g_ref+018H
015A F0                MOVX    @DPTR,A
015B         ?C0007:
                                           ; SOURCE LINE # 188
015B 7B03              MOV     R3,#03H
015D         ?C0008:
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 10  

015D AF03              MOV     R7,AR3
015F 1B                DEC     R3
0160 EF                MOV     A,R7
0161 6024              JZ      ?C0009
                                           ; SOURCE LINE # 189
0163 E4                CLR     A
0164 FF                MOV     R7,A
0165 FE                MOV     R6,A
0166 FD                MOV     R5,A
0167 FC                MOV     R4,A
0168 EB                MOV     A,R3
0169 25E0              ADD     A,ACC
016B 25E0              ADD     A,ACC
016D 2400        E     ADD     A,#LOW g_meas
016F F582              MOV     DPL,A
0171 E4                CLR     A
0172 3400        E     ADDC    A,#HIGH g_meas
0174 F583              MOV     DPH,A
0176 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 190
0179 7400        E     MOV     A,#LOW g_meas+014H
017B 2B                ADD     A,R3
017C F582              MOV     DPL,A
017E E4                CLR     A
017F 3400        E     ADDC    A,#HIGH g_meas+014H
0181 F583              MOV     DPH,A
0183 E4                CLR     A
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0185 80D6              SJMP    ?C0008
0187         ?C0009:
                                           ; SOURCE LINE # 193
0187 7800        E     MOV     R0,#LOW g_refNew
0189 7C00        E     MOV     R4,#HIGH g_refNew
018B 7D01              MOV     R5,#01H
018D 7B01              MOV     R3,#01H
018F 7A00        E     MOV     R2,#HIGH g_ref
0191 7900        E     MOV     R1,#LOW g_ref
0193 7E00              MOV     R6,#00H
0195 7F1D              MOV     R7,#01DH
0197 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 195
019A 900000      E     MOV     DPTR,#c_mem+032H
019D E0                MOVX    A,@DPTR
019E FF                MOV     R7,A
019F 900000      E     MOV     DPTR,#g_ref+018H
01A2 F0                MOVX    @DPTR,A
01A3 FB                MOV     R3,A
                                           ; SOURCE LINE # 198
01A4 E4                CLR     A
01A5 FF                MOV     R7,A
01A6 FE                MOV     R6,A
01A7 FD                MOV     R5,A
01A8 FC                MOV     R4,A
01A9 900000      E     MOV     DPTR,#g_meas+017H
01AC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 199
01AF E4                CLR     A
01B0 FF                MOV     R7,A
01B1 FE                MOV     R6,A
01B2 FD                MOV     R5,A
01B3 FC                MOV     R4,A
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 11  

01B4 900000      E     MOV     DPTR,#g_meas+01BH
01B7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 201
01BA AF03              MOV     R7,AR3
01BC 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 203
01BF 900000      E     MOV     DPTR,#dev_pwm_sat
01C2 E0                MOVX    A,@DPTR
01C3 900000      E     MOV     DPTR,#dev_pwm_limit
01C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
01C7 E4                CLR     A
01C8 7FE0              MOV     R7,#0E0H
01CA 7E2E              MOV     R6,#02EH
01CC FD                MOV     R5,A
01CD FC                MOV     R4,A
01CE 900000      E     MOV     DPTR,#pow_tension
01D1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 205
01D4 C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 207
01D6 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 210
01D8 E4                CLR     A
01D9 900000      E     MOV     DPTR,#g_rx+080H
01DC F0                MOVX    @DPTR,A
01DD A3                INC     DPTR
01DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
01DF 900000      E     MOV     DPTR,#g_rx+084H
01E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
01E3 900000      E     MOV     DPTR,#rest_enabled
01E6 04                INC     A
01E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
01E8 E4                CLR     A
01E9 900000      E     MOV     DPTR,#forced_open
01EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
01ED         ?C0010:
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 222
01ED E4                CLR     A
01EE FF                MOV     R7,A
01EF 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 225
01F2 120000      E     LCALL   function_scheduler
01F5         ?C0012:
                                           ; SOURCE LINE # 228
01F5 120000      E     LCALL   FF_STATUS_Read
01F8 EF                MOV     A,R7
01F9 7020              JNZ     ?C0013
                                           ; SOURCE LINE # 230
01FB 30000E            JNB     interrupt_flag,?C0014
                                           ; SOURCE LINE # 232
01FE 7F01              MOV     R7,#01H
0200 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 234
0203 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 235
0205 C200        E     CLR     watchdog_flag
C51 COMPILER V9.51   MAIN                                                                  02/09/2021 12:48:44 PAGE 12  

                                           ; SOURCE LINE # 237
0207 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 238
020A 80E9              SJMP    ?C0012
020C         ?C0014:
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
020C 3000E6            JNB     watchdog_flag,?C0012
                                           ; SOURCE LINE # 243
020F 7F01              MOV     R7,#01H
0211 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 245
0214 E4                CLR     A
0215 900000      E     MOV     DPTR,#g_refNew+018H
0218 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
0219 80DA              SJMP    ?C0012
021B         ?C0013:
                                           ; SOURCE LINE # 251
021B 7F01              MOV     R7,#01H
021D 120000      E     LCALL   _RESET_FF_Write
0220         ?C0017:
                                           ; SOURCE LINE # 254
0220 120000      E     LCALL   FF_STATUS_Read
0223 EF                MOV     A,R7
0224 6401              XRL     A,#01H
0226 60F8              JZ      ?C0017
0228         ?C0018:
                                           ; SOURCE LINE # 256
0228 120000      E     LCALL   UART_RS485_ReadRxStatus
022B EF                MOV     A,R7
022C 30E7BE            JNB     ACC.7,?C0010
                                           ; SOURCE LINE # 257
022F 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 258
0232 80B9              SJMP    ?C0010
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
0234         ?C0020:
0234 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    565    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
